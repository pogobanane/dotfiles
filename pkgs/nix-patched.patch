From c8cf7ffbb685bda65598e7f07ea5a4b9530915bd Mon Sep 17 00:00:00 2001
From: DavHau <hsngrmpf+github@gmail.com>
Date: Mon, 15 Nov 2021 10:27:46 +0700
Subject: [PATCH] tryEval: catch all EvalError exceptions

---
 src/libexpr/primops.cc | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/src/libexpr/primops.cc b/src/libexpr/primops.cc
index aaeafb931..bb664e79b 100644
--- a/src/libexpr/primops.cc
+++ b/src/libexpr/primops.cc
@@ -762,7 +762,7 @@ static void prim_tryEval(EvalState & state, const Pos & pos, Value * * args, Val
         state.forceValue(*args[0], pos);
         v.attrs->push_back(Attr(state.sValue, args[0]));
         mkBool(*state.allocAttr(v, state.symbols.create("success")), true);
-    } catch (AssertionError & e) {
+    } catch (EvalError & e) {
         mkBool(*state.allocAttr(v, state.sValue), false);
         mkBool(*state.allocAttr(v, state.symbols.create("success")), false);
     }
@@ -776,10 +776,7 @@ static RegisterPrimOp primop_tryEval({
       Try to shallowly evaluate *e*. Return a set containing the
       attributes `success` (`true` if *e* evaluated successfully,
       `false` if an error was thrown) and `value`, equalling *e* if
-      successful and `false` otherwise. `tryEval` will only prevent
-      errors created by `throw` or `assert` from being thrown.
-      Errors `tryEval` will not catch are for example those created
-      by `abort` and type errors generated by builtins. Also note that
+      successful and `false` otherwise. Note that
       this doesn't evaluate *e* deeply, so `let e = { x = throw ""; };
       in (builtins.tryEval e).success` will be `true`. Using
       `builtins.deepSeq` one can get the expected result:
-- 
2.40.1

